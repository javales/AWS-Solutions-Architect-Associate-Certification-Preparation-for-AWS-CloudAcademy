Database Fundamentals for AWS

INTRODUCTION
# Introduction

# What is a Cloud Database?
- Specify Region
- Connect with ODBC connection


# Overview of the AWS Database Services
- Relational Databases generally support Structured Tables and SQL Operations
- Use a schema to define tables within the database
- Create permanent relationships between tables using Constraints and Keys
- Create and process a View/Function or Stored Procedure using database's native script engine to select the values from a number of tables using an Early Bound Process
- RDBMS Script Engine - generally built into database to process queries for us, faster, while providing rollback and versioning
- Relationship Joins + Key Constraints on the tables enable the View to select all the values we need from Person table and Address table
- DRAWBACK: Software Footprint is larger and more complex than non-relational database

Amazon RDS
- Allows running in multiple AZs
- By Default, manages backing up databases for you
- Provides these Database Families - MySQL, Microsoft SQL Server, Oracle Database, MariaDB and Amazon Aurora (with its own cloud native database engine for enhanced speed), PostgreSQL, Amazon Redshift (cloud native Data Warehouse solution)

Amazon Non Relational Databases
- Database Families - 
- Simple Tabular Structure
- No built-in processing/transaction Engine
- No Schema, so changes can be made faster
- Simpler and less dependent on native database code, so lighter in design
- Can support Non-Structured Data, so best for non-structured Data Types (e.g. Videos, Images, or Data Objects that are not uniform in structure)
- By Default, different Data Types supported so no changes to schema required when needing to support a new data type
- By providing just the Data Store, and by keeping code decoupled from the storage layer, requires less computing resources
- Relationships and Joins are typically managed in Application Code, which might be felt with Inner or Outer Joins within large number of tables or queries
- No SQL really means Not Only SQL
- Relational Database uses a persistent connection to use SQL to work with data within it
- Non-Relational Database generally uses a RESTful HTTP interface, so before access, authentication required, then authorized to perform certain actions
- EXAMPLE: DynamoDB uses Query Action to retrieve data from any table that has Composite Primary Key which is a Partition Key or Sort Key
- must use Expression Attribute Values as placeholders in the Expression Parameters such as the Key Expression Parameter and Filter Expression
- same as using Bind Variables in a Relational Database where you substitute the actual values into the select statement at runtime
- Can Scale Faster than Relational Databases
* With a complex set of tables that are regularly joined, best for a Relational Database with a native transactional engine
* Just stores the data, while Relational Databases store data and provides processing engine 

DynamoDB - cloud native object and document object store

Amazon Elasticache - cache service running either Redis or Memcache.d cache engines


AWS NOSQL DATABASES
# Amazon Non Relation Databases in Depth

Amazon DynamoDB
- Cloud native
- For high volumes of records and transactions
- No need to provision capacity upfront
- Fully managed
- Supports both document and key store object types, meaning it can support multiple data types at the same time without us having to define a new schema or field type
- Good when need to keep growing to meet demand with many different object types stored in it
- Runs as a web service provisioned from AWS console or API
- Downloadable DynamoDB available for running on computer or server
- Encryption at rest

Amazon Elasticache
- Managed data cache service from open source Redis and Memcache.d database engines
- Front line cache to respond to Read Requests to an application or database
- Cache holds frequently accessed temporary copies to reduce load on other parts of application
- Supports Two Database Engines

Amazon Elasticache for Redis
* For Features
- need complex data types (e.g. strings, hashes, lists, sets, sorted sets, bitmaps,...)
- need persistence of key store
- need to encrypt
- need to replicate cached data
- need automatic failover if primary node fails
- need backup and restore abilities
- need multiple caches
- need to sort or rake in-memory data sets

Amazon Elasticache for Memcache.d
* For Simplicity and Speed
- simplest model possible
- need to run large nodes with multiple cores or threads
- need ability to scale in/out number of nodes

Amazon Neptune
- Native graph database engine optimized for storing data relationships
- Allows querying graph quickly and efficiently
- For applications that need to perform a lot of queries and lookups to quickly visualize data
- Uses Cases: Knowledge Graphs, Recommendation Engines, Network Security
- Supports Popular Graph Models: Property Graph, W3C RDF
- Supports Respective Query Languages (allow easily building queries that efficiently navigate highly connected data sets): Apache, TinkerPop, Gremlin, SPARQL


AWS RELATIONAL DATABASES
# AWS Relational Databases in Depth
- Amazon RDS is Amazon's managed relational database service 

Benefits:
1 - Ability to scale components - compute metrics independently of each other
2 - Automatic backups and patching - can configure frequency and when patches applied
3 - High Availability - multiple AZs in a Region, allowing running a synchronous or asynchronous version of database in a different AZ
- Microsoft SQL Server service uses SQL Server Mirroring, while the others use Amazon's Fail-over Service
- Amazon Aurora - instances copy data in a DB cluster across multiple AZs in a single Region by default 
4 - Automatic Failure Detection and Recovery

Family:
MySQL - Community versions, Four Instance Families, Two SSD-backed Instance Storage Options, can increase storage size with no downtime, use InnoDB Storage Engine to allow Point-in-Time restoration
Microsoft SQL Server - Pay-as-You-Go, service includes license, allows multiple editions of SQL Server, 2008 R2 and up, Two Storage Types (General Purpose SSD, Provisioned IOPS SSD), to migrate to Provisioned IOPS service must export/import to new DB instance, default DB size is 4TB with up to 16TB if Provisioned IOPS, supports multi-AZ deployments, automatic backups at desired frequency, transaction log backed up in 5-minute intervals, allows Point-in-Time Recovery to any one given second, Automatic Backups can be stored up to 35 days, can run manual snapshots of whole database *stored indefinitely*, 
Microsoft SQL Server Instance Types - General Purpose, Memory Optimized, Burst Support, less support for micro instance types, good for small to medium-sized implementations 
Microsoft SQL Server Large Clusters - Limitations: Always-on Feature of 2012 Enterprise Edition replication and database log shipping not supported on Amazon RDS
Oracle Database - multiple editions, licenses, can use own or provided license, automatic patching and backup, product suite integrations, 
MariaDB - community developed fork of MySQL, 10.1-10.2.11, read replicas, multi-AZ, automatic backups, failover, recovery
PostgreSQL - balance between No SQL and SQL database benefits, good for compliance, multi-AZ, read replicas, auto backups, AWS Migration Services eases schema migration, Schema Conversion Tool
Amazon Aurora - cloud native, fork of MySQL, MySQL and PostgreSQL compatible, speed and availability benefits, replicates across 3 AZs by default, cloud native database cluster spans two or more AZs by default, each cluster has one primary instance for read/write, has at least one Aurora replica for read-only, each cluster can have up to 15 Aurora replicas,  


# Setting Up The AWS Relational Database Service
Demo in AWS Console

# Deciding Which Cloud Database to Use


SUMMARY
# Summary
